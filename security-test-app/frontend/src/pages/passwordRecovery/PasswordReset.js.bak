// https://serverless-stack.com/chapters/handle-forgot-and-reset-password.html

import "./PasswordReset.styles.css"
import { useState , useEffect} from "react";
import { Link, Redirect  } from "react-router-dom"
import { useFormFields } from "./useFormFields"
import LoaderButton from "./LoaderButton"
import { changePassword, recoverPassword } from "../../api/passwordRecoveryService";
import { FormGroup, FormControl, FormLabel } from "react-bootstrap";

import { connect } from 'react-redux';
import { resetPasswordFailure, resetPasswordLegit } from '../../redux/resetPwdActions';

//export default function ResetPassword() {
const ResetPassword=({storedtoken, error, ...props})=>{
    const [codigoEnviado, setCodigoEnviado] = useState(false);  
    //const [confirmado, setConfirmado] = useState(false);
    //const [isConfirmando, setIsConfirmando] = useState(false);
    const [isEnviandoCodigo, setIsEnviandoCodigo] = useState(false);
    const [redirect, setRedirect] = useState("");

    const [campos, handleOnChange] = useFormFields({
        code: "",
        email: "",
        password: "",
        confirmarPassword: "",
    });

    function validarEmail() {
        return campos.email.length > 0;
    }
    /*
    function validarPasswordForm() {
        return (
          campos.code.length > 0 &&
          campos.password.length > 0 &&
          campos.password === campos.confirmarPassword
        );
    }
*/
    async function handleEnviarCodigoClick(event) {
        event.preventDefault();
    
        setIsEnviandoCodigo(true);
        props.resetLegit("asdasd");
        //try {
          await recoverPassword(campos.email).then((response)=>{
            props.resetLegit(response.data)
            setCodigoEnviado(true);
          }).catch((error)=>{
            //props.resetFailure(error)
            setIsEnviandoCodigo(false);
          });
          //setRedirect("/reset")
        //} catch (error) {
        //  setIsEnviandoCodigo(false);
        //}
    }
    /*
    async function handleConfirmarClick(event) {
        event.preventDefault();
    
        setIsConfirmando(true);
    
        try {
          /*await changePassword(
            fields.email,
            fields.code,
            fields.password
          );
          setConfirmado(true);
        } catch (error) {
          setIsConfirmando(false);
        }
    }
*/
    function renderEmailForm() {
        return (
          <form onSubmit={handleEnviarCodigoClick}>
            <FormGroup controlId="email">
              <FormLabel>Email</FormLabel>
              <FormControl autoFocus type="email" value={campos.email} onChange={handleOnChange} />
            </FormGroup>
            <LoaderButton block type="submit" isLoading={isEnviandoCodigo} disabled={!validarEmail()}>
              Enviar Confirmación
            </LoaderButton>
          </form>
        );
      }
    /*
      function renderConfirmacionForm() {
        return (
          <form onSubmit={handleConfirmarClick}>
            <FormGroup controlId="code">
              <FormLabel>Confirmation Code</FormLabel>
              <FormControl autoFocus type="tel" value={campos.code} onChange={handleOnChange} />
              <FormText>
                Please check your email ({campos.email}) for the confirmation code.
              </FormText>
            </FormGroup>
            <hr />
            <FormGroup controlId="password">
              <FormLabel>New Password</FormLabel>
              <FormControl type="password" value={campos.password} onChange={handleOnChange} />
            </FormGroup>
            <FormGroup controlId="confirmarPassword">
              <FormLabel>Confirm Password</FormLabel>
              <FormControl type="password" value={campos.confirmarPassword} onChange={handleOnChange} />
            </FormGroup>
            <LoaderButton block type="submit" isLoading={isConfirmando} disabled={!validarPasswordForm()}>
              Confirm
            </LoaderButton>
          </form>
        );
    }
    
    useEffect(() =>{    
        document.title = `Code is ${campos.code}`;  
    }, [campos.code]);*/

    function renderMensajeDeSuceso() {
      return (
        <div className="success">
          <p>Email enviado.</p>
          <p>
            <Link to="/">
              Clic acá para volver al formulario de login.
            </Link>
          </p>
        </div>
      );
  }

    return (
      <div className="ResetPassword">
        {!codigoEnviado ? renderEmailForm() : renderMensajeDeSuceso()}
      </div>
    );
}//{(!redirect ? renderEmailForm() : <Redirect to={redirect} />)}
//{!codigoEnviado ? renderEmailForm() : !confirmado ? renderConfirmacionForm() : renderMensajeDeSuceso()}

const mapStateToProps=({resetPwd})=>{
  console.log("state ",resetPwd)
  return {
      storedtoken:resetPwd.token,
      error:resetPwd.error
}}


const mapDispatchToProps=(dispatch)=>{

    return {
      resetFailure:(message)=>dispatch(resetPasswordFailure(message)),
      resetLegit:(receivedtoken)=>dispatch(resetPasswordLegit(receivedtoken))
    }
}

export default connect(mapStateToProps,mapDispatchToProps)(ResetPassword);